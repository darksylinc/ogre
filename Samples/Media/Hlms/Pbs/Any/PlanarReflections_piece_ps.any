
//#include "SyntaxHighlightingMisc.h"

@property( use_planar_reflections )

@piece( DeclPlanarReflTextures )
	uniform sampler2D planarReflectionTex;
@end

@piece( DoPlanarReflections )
	//float3 envColourS;
	//float3 envColourD;

	float4 planarReflection = planarReflections[planarReflectionIdx];
	float distanceToPlanarReflPlane = dot( passBuf.planarReflection.xyz, inPs.pos.xyz ) + planarReflection.w;
	float3 pointInPlane = inPs.pos.xyz - viewDir * distanceToPlanarReflPlane;
	@property( syntax == hlsl )
		float3 projPointInPlane = mul( passBuf.planarReflProjectionMat, float4( pointInPlane.xyz, 1.0 ) ).xyw;
	@end @property( syntax != hlsl )
		float3 projPointInPlane = (float4( pointInPlane.xyz, 1.0 ) * passBuf.planarReflProjectionMat).xyw;
	@end
	float2 planarReflUVs = projPointInPlane.xy /= projPointInPlane.z;

	float3 planarReflectionS = textureLod( planarReflectionTex, planarReflUVs.xy, ROUGHNESS * 12.0 ).xyz;

	//Fade out as our surface gets away from the reflection plane (planarWeight = 0 means fully faded out)
	float planarWeight = max( 1.0 - abs( distanceToPlanarReflPlane ) * passBuf.invMaxDistanceToPlanarRefl.x, 0.0 );
	//Fade out if pointInPlane failed (we landed outside the screen, we have no information)
	planarWeight = (abs( planarReflUVs.x - 0.5 ) > 0.5 ||
					abs( planarReflUVs.y - 0.5 ) > 0.5) ? 0.0 : planarWeight;
	@property( hlms_use_ssr || use_envprobe_map )
		envColourS = lerp( envColourS, planarReflectionS, planarWeight );
	@end @property( !hlms_use_ssr && !use_envprobe_map )
		envColourS = planarReflectionS * planarWeight;
		float3 envColourD = vec3( 0, 0, 0 );
	@end
@end

@end ///use_planar_reflections
