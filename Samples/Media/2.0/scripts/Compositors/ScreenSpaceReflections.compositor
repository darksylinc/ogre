compositor_node ScreenSpaceReflectionsRenderingNode
{
	in 0 rt_renderwindow

	texture mrtGBuffer target_width target_height PF_A2R10G10B10 PF_SHORT_GR depth_format PF_D32_FLOAT depth_texture depth_pool 1
	texture mrtDepthBuffer target_width target_height PF_D32_FLOAT depth_pool 1
	
	texture prevFrame target_width target_height PF_R8G8B8A8 depth_pool 0
	//Needed to calculate the difference in depths (if it's too high, then we can't use this result)
	texture prevFrameDepthBuffer target_width target_height PF_D32_FLOAT
	texture rtt target_width target_height PF_R8G8B8A8

	texture rayTracingResults target_width target_height PF_FLOAT32_RGBA depth_pool 0

	target mrtGBuffer
	{
		pass clear
		{
			colour_value 0 0 1 1
		}

		pass render_scene
		{
			overlays	off
			shadows		ScreenSpaceReflectionsShadowNode

			is_prepass	on
		}
	}

	target rayTracingResults
	{
		pass clear {}
		pass render_quad
		{
			quad_normals	camera_far_corners_view_space

			material SSR/ScreenSpaceReflectionsVectors
			input 0 mrtDepthBuffer
			input 1 mrtGBuffer 1
		}
	}

	target rtt
	{
		pass clear
		{
			colour_value 0.2 0.4 0.6 1
		}

		pass render_scene
		{
			overlays	on
			shadows		ScreenSpaceReflectionsShadowNode

			use_prepass			mrtGBuffer
			lod_update_list		false
		}
	}
	
	target prevFrame
	{
		pass clear
		{
			colour_value 0 0 0 0
			discard_only true
		}

		pass render_quad
		{
			material Ogre/Copy/4xFP32
			input 0 rtt
		}
	}
	
	target rt_renderwindow
	{
		pass clear
		{
			colour_value 0 0 0 0
			discard_only true
		}

		pass render_quad
		{
			material Ogre/Copy/4xFP32
			input 0 rtt
		}
	}
}

compositor_node_shadow ScreenSpaceReflectionsShadowNode
{
	technique pssm

	num_splits		3
	pssm_lambda		0.95
	shadow_map 0 2048 2048 PF_D32_FLOAT light 0 split 0
	shadow_map 1 1024 1024 PF_D32_FLOAT light 0 split 1
	shadow_map 2 1024 1024 PF_D32_FLOAT light 0 split 2

	shadow_map 0 1 2
	{
		pass clear
		{
			colour_value 1 1 1 1
		}
		pass render_scene
		{
		}
	}
}

workspace ScreenSpaceReflectionsWorkspace
{
	connect_output ScreenSpaceReflectionsRenderingNode 0
}
